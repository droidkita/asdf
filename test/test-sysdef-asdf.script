;;; -*- Lisp -*-

(format! t "~%Using ASDF ~A~%" (asdf-version))
(assert (version< "3.0" (asdf-version))) ;; check that we have a recent enough ASDF

(DBG "Try load ASDF with an empty configuration")
(initialize-source-registry
 '(:source-registry :ignore-inherited-configuration))
(load-system :asdf)
;; We haven't found it, and got the fallback
(assert-equal nil (system-source-file (find-system :asdf)))

;; Bogus sysdef finding function, for the sake of testing no-load-old-version.
(defun sysdef-bogus-test-search (system)
  (declare (ignore system))
  (subpathname *test-directory* "always-error.lisp"))

(clear-system "asdf")
(let ((*system-definition-search-functions* '(sysdef-bogus-test-search))
      (state "Didn't catch warning"))
  (DBG "Bogus attempt at loading an old ASDF: should issue a warning and ignore")
  (handler-bind
      ((simple-warning
         #'(lambda (c)
             (when (search "ASDF will ignore this configured system rather than downgrade itself."
                           (simple-condition-format-control c))
               (setf state "Caught warning")))))
    (clear-system "asdf")
    (upgrade-asdf))
  (assert-equal state "Caught warning")
  (DBG "2nd bogus attempt at loading same old ASDF: should ignore without a warning")
  (handler-bind
      ((simple-warning
         #'(lambda (c)
             (error "Should not have issued warning, but did issue:~%  ~A" c))))
    (clear-system "asdf")
    (upgrade-asdf)))

(DBG "Load ASDF with proper configuration: should find asdf.asd from the source above")
(initialize-source-registry
 `(:source-registry
   (:directory ,*asdf-directory*)
   (:directory ,*uiop-directory*)
   :ignore-inherited-configuration))
(clear-system "asdf")
(load-system :asdf)
;; This time we found it, but it was skipped because the version was the same
(assert-equal nil (system-source-file (find-system :asdf)))


;; But if we cheat on our version, that should work
(setf asdf::*asdf-version* "3.0")
(clear-system "asdf")
(def-test-system "fooey")
(defparameter *ticks* 0)
(defun tick () (incf *ticks*))
(defmethod input-files :after ((load-op operation) (c system)) (tick))
(input-files 'load-op "asdf")
(assert-equal *ticks* 3)
(assert (find-system "fooey" nil))
(with-expected-failure (#+xcl t)
  ;; expected-failure: XCL has trouble with the ASDF upgrade
  (load-system :asdf)
  (assert-pathname-equal (subpathname *asdf-directory* "asdf.asd")
                         (system-source-file (find-system :asdf))))

;; Upgrading from an old-enough version redefined away the input-files method!
(setf *ticks* 4)
(input-files 'load-op "asdf")
(assert-equal *ticks* 4)
;; It also cleared away previously defined systems
(assert (not (find-system "fooey" nil)))


;; The data-punting upgrade will mess up component identity, so clear the cache
(clear-cache)

(setf asdf::*asdf-version* asdf/upgrade::*oldest-forward-compatible-asdf-version*)
(clear-system "asdf")
(def-test-system "fooey")
(setf *ticks* 5)
(defmethod input-files :after ((load-op operation) (c system))
  (incf *ticks*))
(input-files 'load-op "uiop")
(assert-equal *ticks* 8)
(with-expected-failure (#+xcl t)
  ;; expected-failure: XCL has trouble with the ASDF upgrade
  (load-system :asdf))
;; Upgrading from a recent-enough version, the input-files method was preserved!
;; But we need to clear the cache for it not to be short-circuited.
(clear-cache)
(assert (find-system "fooey" nil))

(setf *ticks* 9)
(eval '(input-files 'load-op "uiop"))
(assert-equal *ticks* 12)

;;; disabling this test on windows since it relies on running make-asdf.bat, which
;;; does not work for me under cygwin. - rpg 2016-03-20

(defun search-makefile (target)
  (with-open-file (str (merge-pathnames (make-pathname :name "Makefile" :type nil)
                                        *asdf-directory* ))
    (let ((line
           (loop for x = (read-line str)
                 when (search target x)
                 return (subseq x (length target))
                 finally (error "Didn't find ~a in Makefile." target))))
      (mapcar 'parse-native-namestring (split-string line)))))

(DBG "Checking that the bootstrap script and asdf.asd are in synch")
(defun system-lisp-files (system)
  (loop :for f :in (input-files 'concatenate-source-op system)
    :collect (enough-pathname f *asdf-directory*)))

(defun bootstrap-lisp-files (target)
  (let ((target (format nil "~a := " target)))
    (search-makefile target)))

(defmacro compare-files (system target)
   `(assert-pathnames-equal (system-lisp-files ,system) (bootstrap-lisp-files ,target)))

(DBG "Testing that the Makefile and ASDF agree on the order of UIOP files")
(compare-files :uiop "driver_lisp")

(DBG "Testing that the Makefile and ASDF agree on the order of ASDF/DEFSYSTEM files")
(compare-files :asdf/defsystem "defsystem_lisp")
